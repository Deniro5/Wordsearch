{"version":3,"sources":["components/Arrangements.js","components/words.js","components/Wordbank.js","components/Wordgrid.js","components/Home.js","components/App.js","index.js"],"names":["arrangements","size","row","column","direction","words","Wordbank","props","count","completed","wordlist","length","react_default","a","createElement","className","map","item","onClick","window","location","reload","Wordgrid","_useState","useState","_useState2","Object","slicedToArray","grid","setGrid","_useState3","_useState4","list","setList","_useState5","_useState6","mousePressed","setMousePressed","_useState7","_useState8","startPoint","setStartPoint","canvas","useRef","staticCanvas","useEffect","newgrid","newwords","i","i2","push","charAt","Math","floor","random","arrangement","startrow","startcol","startCoord","wordindex","word","splice","endCoord","draw","event","recta","target","getBoundingClientRect","cx","clientX","left","cy","clientY","top","ctx","current","getContext","globalAlpha","strokeStyle","clearRect","width","height","beginPath","moveTo","lineTo","stroke","mousepress","mouseunpress","x1","y1","x2","y2","wordx1","wordy1","wordx2","wordy2","newList","toConsumableArray","checkLine","staticctx","letter","style","background","position","onMouseMoveCapture","bind","onMouseDown","onMouseUp","ref","components_Wordbank","Home","components_Wordgrid","App","components_Home","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.bb650468.chunk.js","sourcesContent":["//direction  0: left to right 1: right to left   2: up to down  3 down to up     4: top left to bottom right  5: bottom right to top left \n\nconst arrangements = [\n    [\n        {size:6 , row: 1, column: 2, direction: 0},\n        {size:4 , row: 2, column: 9, direction: 1},\n        {size:8 , row: 3, column: 0, direction: 2},\n        {size:4 , row: 2, column: 2, direction: 4},\n        {size:5 , row: 3, column: 7, direction: 2},\n        {size:9 , row: 9, column: 12, direction: 1},\n        {size:5 , row: 3, column: 13, direction: 5},\n        {size:6 , row: 11, column: 7, direction: 0},\n        {size:3 , row: 7, column: 2, direction: 0},\n        {size:6 , row: 12, column: 4, direction: 0},\n    ],\n    [\n        {size:8 , row: 2, column: 0, direction: 2},\n        {size:4 , row: 0, column: 4, direction: 0},\n        {size:9 , row: 1, column: 1, direction: 4},\n        {size:3 , row: 13, column: 0, direction: 0},\n        {size:5 , row: 3, column: 12, direction: 5},\n        {size:5 , row: 3, column: 10, direction: 1},\n        {size:7 , row: 12, column: 6, direction: 1},\n        {size:3 , row: 10, column: 11, direction: 4},\n        {size:6, row:5, column: 3, direction: 2},\n        {size:6, row:8, column: 5, direction: 4},\n    ],\n    [\n        {size:8 , row: 2, column: 8, direction: 2},\n        {size:4 , row: 4, column: 2, direction: 0},\n        {size:6 , row: 12, column: 12, direction: 1},\n        {size:7 , row: 6, column: 6, direction: 5},\n        {size:4 , row:10, column: 5, direction: 2},\n        {size:4 , row:5, column: 10, direction: 4},\n        {size:4 , row:3, column: 10, direction: 0},\n        {size:5 , row:0, column: 4, direction: 5},\n        {size:9 , row:0, column: 13, direction: 1},\n        {size:5 , row:9, column: 1, direction: 3},\n    ],\n    [\n        {size:8 , row: 0 , column: 13, direction: 1},\n        {size:9 , row:0 , column: 3, direction: 4},\n        {size:6 , row: 3 , column: 3, direction: 2},\n        {size:3 , row:2 , column: 0, direction: 4},\n        {size:7 , row:5 , column: 1, direction: 2},\n        {size:6 , row:10 , column: 6, direction: 0},\n        {size:3 , row:5 , column: 6, direction: 4},\n        {size:5 , row:8 , column: 6, direction: 5},\n        {size:7 , row:12 , column: 11, direction: 1},\n        {size:4 , row:3 , column: 11, direction: 2},\n    ],\n]\n\nexport default arrangements;","//direction  0: left to right 1: right to left   2: up to down  3 down to up     4: top left to bottom right  5: bottom right to top left \n//first array is three letter words, last is nine letters\n\nconst words = [\n    [\"sky\", \"hat\", \"fat\" ,\"fly\", \"hit\", \"run\" , \"ran\", \"can\", \"man\",\"not\",\"you\",\"the\",\"too\",\"fun\",\"fin\",\"fan\",\"ant\",\"aim\",\"air\",\"bye\",\"buy\",\"bin\",\"can\"],\n    [\"ammo\",\"bury\",\"chat\",\"done\",\"ever\",\"goal\",\"foul\",\"hate\",\"love\",\"kiss\",\"jump\",\"mind\",\"name\",\"over\",\"aura\",\"zero\",\"your\",\"unit\",\"time\",\"seat\",\"ride\"],\n    [\"after\",\"great\",\"timer\",\"chair\",\"flame\",\"water\",\"stone\",\"sword\",\"knife\",\"write\",\"print\",\"magic\",\"level\",\"carry\",\"their\",\"plate\",\"diver\",\"pilot\",\"photo\"],\n    [\"minute\",\"binder\",\"heater\",\"hunter\",\"coffee\",\"valley\",\"drawer\",\"closet\",\"pencil\",\"window\",\"pillow\",\"handle\",\"motion\",\"sniper\",\"driver\",\"runway\",\"jacket\"],\n    [\"terrain\",\"picture\",\"garbage\",\"blanket\",\"machine\",\"musical\",\"fashion\",\"storage\",\"cushion\",\"tuesday\",\"running\",\"speaker\",\"painter\",\"luggage\",\"cologne\"],\n    [\"forklift\",\"airplane\",\"gardener\",\"magician\",\"clarinet\",\"trombone\",\"keyboard\",\"computer\",\"mattress\",\"backpack\",\"saturday\",\"baseball\",\"football\",\"illusion\",\"exchange\"],\n    [\"whirlpool\",\"furniture\",\"commotion\",\"telephone\",\"xylophone\",\"wallpaper\",\"briefcase\",\"operation\",\"wednesday\",\"cardboard\",\"negotiate\",\"emotional\",\"champagne\"]\n]\n\nexport default words;","import React from 'react';\n\n\nconst Wordbank = props => {\n\n  let count = 0;\n  let completed = true;\n  while (count < props.wordlist.length) {  //Check if the wordsearch has been completed\n    if (!props.wordlist[count][3]) {\n      completed = false;\n      break;\n    }\n    count++;\n  }\n\n  return (\n    <div className = \"wordBankContainer\">\n        <h2> Word Bank</h2>\n        {props.wordlist.map((item) => (\n          <p className = {(item[3] ? \"found\" : \"\")}> {item[0]} </p>\n        ))}\n        {completed \n        && \n        <button onClick = {() =>{window.location.reload()}}> Play Again</button>\n        }\n    </div>\n    );\n  }\n\n\nexport default Wordbank;\n","import React, {useState, useEffect, useRef} from 'react';\nimport arrangements from './Arrangements';\nimport words from './words';\nimport Wordbank from './Wordbank'\n\nconst Wordgrid = () => {\n\n  const [grid, setGrid] = useState([])\n  const [list,setList] = useState([])\n  const [mousePressed,setMousePressed] = useState(false)\n  const [startPoint, setStartPoint] = useState([])\n  const canvas = useRef(null);\n  const staticCanvas = useRef(null);\n\n  const randomChar = () => {\n    let characters = 'abcdefghijklmnopqrstuvwxyz';\n    return characters.charAt(Math.floor(Math.random() * characters.length));\n }\n\n  useEffect(() => {   \n    let newgrid = []\n    let newwords = []\n    for (let i = 0; i < 14; i++) {   //populate grid with random characters first\n      let row = [];\n      for (let i2 = 0; i2 < 14; i2++) {\n        row.push([randomChar(), \"\"])\n      }\n      newgrid.push(row)\n    }\n    const arrangement = arrangements[Math.floor(Math.random() * arrangements.length)]   //Choose predefined arrangement\n    for (let i = 0; i < arrangement.length; i++) {  //insert the words in the grid\n      let startrow = arrangement[i].row\n      let startcol = arrangement[i].column\n      let startCoord = [20 + startcol * 35 , 20 + startrow * 35] \n      let wordlist = words[arrangement[i].size-3]\n      let wordindex = Math.floor(Math.random() * wordlist.length)\n      let word = wordlist[wordindex] //select random word of specific size\n      wordlist.splice(wordindex,1);\n      let count = 0;\n      if (arrangement[i].direction === 0) {\n        while (count < arrangement[i].size) {\n          newgrid[startrow][startcol] = word.charAt(count);\n          count++;\n          if (count < arrangement[i].size) {\n            startcol++;\n          }\n        }\n      }\n      else if (arrangement[i].direction === 1) {\n        while (count < arrangement[i].size) {\n          newgrid[startrow][startcol] = word.charAt(count);\n          count++;\n          if (count < arrangement[i].size) {\n            startcol--;\n          }\n        }\n      }\n      else if (arrangement[i].direction === 2) {\n        while (count < arrangement[i].size) {\n          newgrid[startrow][startcol] = word.charAt(count);\n          count++;\n          if (count < arrangement[i].size) {\n            startrow++;\n          }\n        }\n      }\n      else if (arrangement[i].direction === 3) {\n        while (count < arrangement[i].size) {\n          newgrid[startrow][startcol] = word.charAt(count);\n          count++;\n          if (count < arrangement[i].size) {\n            startrow--;\n          }\n        }\n      }\n      else if (arrangement[i].direction === 4) {\n        while (count < arrangement[i].size) {\n          newgrid[startrow][startcol] = word.charAt(count);\n          count++;\n          if (count < arrangement[i].size) {\n            startrow++;\n            startcol++;\n          }\n        }\n      }\n      else {\n        while (count < arrangement[i].size) {\n          newgrid[startrow][startcol] = word.charAt(count);\n          count++;\n          if (count < arrangement[i].size) {\n            startrow++;\n            startcol--;\n          }\n        }\n      }\n      let endCoord = [20 + startcol * 35 , 20 + startrow * 35]  \n      newwords.push([word , startCoord, endCoord, false])\n    }\n      setGrid(newgrid)\n      setList(newwords)\n  }, [])\n\n  const checkLine = (x1, y1, x2 ,y2) => {\n    let count = 0;\n    while (count < list.length) {\n      let word = list[count];\n      if (!word[3]) {  //only check if word hasnt been found\n        let wordx1 = word[1][0]\n        let wordy1 = word[1][1]\n        let wordx2 = word[2][0]\n        let wordy2 = word[2][1]\n        if (((x1 < wordx1 + 10) && (x1 > wordx1 - 10)) && ((x2 < wordx2 + 10) && (x2 > wordx2 - 10)) && ((y2 < wordy2 + 10) && (y2 > wordy2 - 10)) && ((y2 < wordy2 + 10) && (y2 > wordy2 - 10))){\n          let newList = [...list]\n          newList[count][3] = true;  //mark word as found\n          setList(newList)\n          return true;\n        }\n        //Have to check both directions\n        if ((x1 < wordx2 + 10 && x1 > wordx2 - 10) && (x2 < wordx1 + 10 && x2 > wordx1 - 10) && (y1 < wordy2 + 10 && y1 > wordy2 - 10) && (y2 < wordy1 + 10 && y2 > wordy1 - 10)  ) {\n          let newList = [...list]\n          newList[count][3] = true;  //mark word as found\n          setList(newList)\n          return true;\n        }\n      }\n      count++;\n    }\n    return false;\n  }\n\n const draw = (event) => {\n  if (mousePressed) {\n    var recta = event.target.getBoundingClientRect();\n    var cx = event.clientX - recta.left; //x position within the element.\n    var cy = event.clientY - recta.top;  //y position within the element.\n    const ctx = canvas.current.getContext('2d');\n    ctx.globalAlpha = 0.5;\n    ctx.strokeStyle = \"#C2C5CC\";\n    ctx.clearRect(0, 0, canvas.current.width, canvas.current.height);\n    ctx.beginPath();\n    var count = 0;\n    while (count < 1) {\n      ctx.moveTo(startPoint[0] + count, startPoint[1] + count);   //add thickness to the line\n      ctx.lineTo(cx + count, cy + count);\n      ctx.stroke();\n      ctx.moveTo(startPoint[0] - count, startPoint[1] - count);   //add thickness to the line\n      ctx.lineTo(cx - count, cy - count);\n      ctx.stroke();\n      count++;\n    }\n  }\n }\n\nconst mousepress = (event) => {\n  var recta = event.target.getBoundingClientRect();\n  var cx = event.clientX - recta.left; //x position within the element.\n  var cy = event.clientY - recta.top;  //y position within the element.\n  setStartPoint([cx,cy])\n  setMousePressed(true)\n}\n\nconst mouseunpress = (event) => {\n  var recta = event.target.getBoundingClientRect();\n  var cx = event.clientX - recta.left; //x position within the element.\n  var cy = event.clientY - recta.top;  //y position within the element\n  const result = checkLine(startPoint[0], startPoint[1], cx,  cy);  //check if the line that we drew corresponds to a word\n  if (result) { //We will have to draw this line on another canvas if theres a match\n    var count = 0;\n    const staticctx = staticCanvas.current.getContext('2d');\n    staticctx.strokeStyle = \"#458B00\";\n    while (count < 1) {\n      staticctx.moveTo(startPoint[0] + count, startPoint[1] + count);   //add thickness to the line\n      staticctx.lineTo(cx + count, cy + count);\n      staticctx.stroke();\n      staticctx.moveTo(startPoint[0] - count, startPoint[1] - count);   //add thickness to the line\n      staticctx.lineTo(cx - count, cy - count);\n      staticctx.stroke();\n      count++;\n    }\n  }\n  const ctx = canvas.current.getContext('2d');\n  ctx.clearRect(0, 0, canvas.current.width, canvas.current.height); //clear the canvas\n  setMousePressed(false)\n}\n\n  if (grid.length === 0) {\n    return (\n      <div>\n        <p> loading</p>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <div className = \"wordGridContainer\">\n        {grid.map((row) => (\n          row.map((letter) => (\n            <p> {letter} </p> \n          )) \n        ))}\n        <canvas style = {{background:\"\" , width: \"500px\", height: \"500px\", position: \"absolute\", top:0, left: 0}} onMouseMoveCapture = {draw.bind(this)} onMouseDown = {mousepress} onMouseUp = {mouseunpress} ref={canvas} width = {500} height = {500}>\n        </canvas>\n        <canvas style = {{background:\"\" , width: \"500px\", height: \"500px\", position: \"absolute\", top:0, left: 0}} onMouseMoveCapture = {draw.bind(this)} onMouseDown = {mousepress} onMouseUp = {mouseunpress} ref={staticCanvas} width = {500} height = {500}>\n        </canvas>\n      </div>\n      <Wordbank wordlist = {list} />\n    </div>\n    );\n  }\n\nexport default Wordgrid;\n","import React from 'react';\nimport Wordgrid from './Wordgrid';\n\nconst Home = props => {\n\n  return (\n    <div className=\"homeContainer\">\n      <Wordgrid/>\n    </div>\n  );\n}\n\n\nexport default Home;\n\n\n","import React, { Component } from 'react';\nimport Home from './Home'\nimport '../scss/app.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Home/>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}